generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE__URL")
}

model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
}

model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
}

model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auth            Auth      @relation(fields: [user_id], references: [authId], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
}

model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
}

model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
}

model mfa_challenges {
  id          String      @id @db.Uuid
  factor_id   String      @db.Uuid
  created_at  DateTime    @db.Timestamptz(6)
  verified_at DateTime?   @db.Timestamptz(6)
  ip_address  String      @db.Inet
  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
}

model mfa_factors {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  friendly_name  String?
  factor_type    factor_type
  status         factor_status
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime         @db.Timestamptz(6)
  secret         String?
  mfa_challenges mfa_challenges[]
  auth           Auth             @relation(fields: [user_id], references: [authId], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
}

model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
}

model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
}

model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
}

model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  auth           Auth             @relation(fields: [user_id], references: [authId], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
}

model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
}

model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]
}

model Auth {
  instance_id                 String?       @db.Uuid
  authId                      String        @id @default(uuid()) @db.Uuid
  aud                         String?       @db.VarChar(255)
  email                       String?       @unique @db.VarChar(255)
  encrypted_password          String?       @db.VarChar
  email_confirmed_at          DateTime?     @db.Timestamptz(6)
  invited_at                  DateTime?     @db.Timestamptz(6)
  confirmation_token          String?       @unique @db.VarChar(255)
  confirmation_sent_at        DateTime?     @db.Timestamptz(6)
  recovery_token              String?       @unique @db.VarChar(255)
  recovery_sent_at            DateTime?     @db.Timestamptz(6)
  email_change_token_new      String?       @db.VarChar(255)
  email_change                String?       @db.VarChar(255)
  email_change_sent_at        DateTime?     @db.Timestamptz(6)
  last_sign_in_at             DateTime?     @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?     @db.Timestamptz(6)
  updated_at                  DateTime?     @db.Timestamptz(6)
  phone                       String?       @unique
  phone_confirmed_at          DateTime?     @db.Timestamptz(6)
  phone_change                String?       @default("")
  phone_change_token          String?       @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?     @db.Timestamptz(6)
  confirmed_at                DateTime?     @db.Timestamptz(6)
  email_change_token_current  String?       @default("") @db.VarChar(255)
  email_change_confirm_status Int?          @default(0) @db.SmallInt
  banned_until                DateTime?     @db.Timestamptz(6)
  reauthentication_token      String?       @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?     @db.Timestamptz(6)
  is_sso_user                 Boolean       @default(false)
  deleted_at                  DateTime?     @db.Timestamptz(6)
  is_anonymous                Boolean       @default(false)
  role                        role          @default(USER)
  user                        User?
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  sessions                    sessions[]

  @@index([instance_id])
  @@index([is_anonymous])
}

model User {
  email              String          @unique
  name               String?
  userStreak         Int             @default(0)
  isDeleted          Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  deletedAt          DateTime?
  userId             String          @id @db.Uuid
  profileDescription String?
  profileImage       String?
  userPoints         Int             @default(0)
  feedback           Feedback[]
  Notification       Notification[]
  report             Report[]
  auth               Auth            @relation(fields: [userId], references: [authId])
  userProgress       User_Progress[]
  isAdmin            Boolean         @default(false)
}

model User_Progress {
  progressId  String  @id @default(uuid()) @db.Uuid
  userId      String  @db.Uuid
  gameId      String  @db.Uuid
  isCompleted Boolean
  isDeleted   Boolean @default(false)
  game        Game    @relation(fields: [gameId], references: [id])
  user        User    @relation(fields: [userId], references: [userId])
}

model Skill {
  id        String @id @default(uuid()) @db.Uuid
  skillName String
  unit      Unit[]
}

model Unit {
  id         String    @id @default(uuid()) @db.Uuid
  unitNumber Int?
  unitName   String
  skillId    String    @db.Uuid
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  isDeleted  Boolean   @default(false)
  updatedAt  DateTime  @updatedAt
  lesson     Lesson[]
  skill      Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
}

model Lesson {
  id           String    @id @default(uuid()) @db.Uuid
  lessonNumber Int?
  lessonName   String
  unitId       String    @db.Uuid
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  isDeleted    Boolean   @default(false)
  updatedAt    DateTime  @updatedAt
  game         Game[]
  unit         Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model Game {
  id           String          @id @default(uuid()) @db.Uuid
  gameValue    Int             @default(100)
  isDeleted    Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deletedAt    DateTime?
  lessonId     String          @db.Uuid
  gameType     Int
  lesson       Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  gameAssets   Game_Assets[]
  userProgress User_Progress[]
}

model Game_Assets {
  id        String    @id @default(uuid()) @db.Uuid
  gameId    String    @db.Uuid
  assetName String
  assetType String
  fileUrl   String
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  game      Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Report {
  id                String    @id @default(uuid()) @db.Uuid
  userId            String    @db.Uuid
  reportTitle       String
  reportDescription String
  isDeleted         Boolean   @default(false)
  createdAt         DateTime  @default(now())
  deletedAt         DateTime?
  user              User      @relation(fields: [userId], references: [userId])
}

model Feedback {
  id                  String    @id @default(uuid()) @db.Uuid
  userId              String    @db.Uuid
  feedbackTitle       String
  feedbackDescription String
  isDeleted           Boolean   @default(false)
  createdAt           DateTime  @default(now())
  deletedAt           DateTime?
  user                User      @relation(fields: [userId], references: [userId])
}

model Notification {
  id                      String               @id @default(uuid()) @db.Uuid
  userId                  String               @db.Uuid
  notificationTitle       String
  notificationDescription String
  isDeleted               Boolean              @default(false)
  createdAt               DateTime             @default(now())
  deletedAt               DateTime
  notification_setting_id Int                  @unique
  Notification_setting    Notification_setting @relation(fields: [notification_setting_id], references: [id])
  user                    User                 @relation(fields: [userId], references: [userId])
}

model Notification_setting {
  id                Int           @id @default(autoincrement())
  emailNotifEnabled Boolean
  pushNotifEnabled  Boolean
  Notification      Notification?
}

enum aal_level {
  aal1
  aal2
  aal3
}

enum code_challenge_method {
  s256
  plain
}

enum factor_status {
  unverified
  verified
}

enum factor_type {
  totp
  webauthn
}

enum role {
  ADMIN
  CONTENT_EDITOR
  USER
}
