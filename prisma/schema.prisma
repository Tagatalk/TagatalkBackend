// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User{
  id String @id @default(uuid())
  email String @unique
  name String 
  userStreak Int
  isDeleted Boolean 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  report Report[]
  feedback Feedback[]
  userProgress User_Progress[]
  Notification Notification[]
}

model User_Progress {
  progressId   String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  game         Game        @relation(fields: [gameId], references: [id])
  gameId       String
  isCompleted  Boolean
  isDeleted    Boolean
}


model Game {
  id String @id @default(uuid())
  gameName String 
  gameType String
  gameLevel Int
  gameValue Int
  isDeleted Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?  
  gameAssets Game_Assets[]
  userProgress User_Progress[]
}

model Game_Assets {
  id        String   @id @default(uuid())
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String
  assetName String
  assetType String
  fileUrl   String
  isDeleted Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}


model Report{
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references:[id])
  reportTitle String
  reportDescription String
  isDeleted Boolean
  createdAt DateTime @default(now())
  deletedAt DateTime?
}


model Feedback{
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references:[id])
  feedbackTitle String
  feedbackDescription String
  isDeleted Boolean
  createdAt DateTime @default(now())
  deletedAt DateTime?
}


model Notification {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references:[id])
  notificationTitle String
  notificationDescription String
  isDeleted Boolean
  createdAt DateTime @default(now())
  deletedAt DateTime 
  notification_setting_id Int @unique
  Notification_setting Notification_setting @relation(fields: [notification_setting_id], references: [id])
}

model Notification_setting {
  id Int @id @default(autoincrement())
  emailNotifEnabled Boolean
  pushNotifEnabled Boolean
  Notification Notification?
}


